# Justing Dick, Ulrich Haydt, Kevin Nguyen, Treya Soriano



import sys
from PIL import Image
from PySide6.QtWidgets import (QApplication, QWidget, QLabel, QPushButton, QLineEdit,
                                QHBoxLayout, QVBoxLayout, QDialog, QTextBrowser, QComboBox)
from PySide6.QtGui import QPixmap
from PySide6.QtCore import Slot

class NewWindow(QWidget):
  def __init__(self, url):
    super().__init__()
    self.text = QLabel(url)
    self.layout = QVBoxLayout()
    self.layout.addWidget(self.text)
    self.setLayout(self.layout)


class MyWindow(QWidget):
  def __init__(self):
    super().__init__()

    self.my_pic_list = ['Mountain', 'Plains', 'Desert']
    self.my_filter_list = ['Sunrise', 'Midday', 'Night']
    self.my_images = ['mountain.jpg', 'plains.jpg', 'desert.jpg']
    self.my_lineedit = QLineEdit("Please select an Image and a Filter.")
    self.combo = QComboBox()
    self.combo.addItems(self.my_pic_list)
    self.combo2 = QComboBox()
    self.combo2.addItems(self.my_filter_list)
    self.btn = QPushButton('CLICK ME')
    vbox = QVBoxLayout()
    vbox.addWidget(self.my_lineedit)
    vbox.addWidget(self.combo)
    vbox.addWidget(self.combo2)
    vbox.addWidget(self.btn)
    self.setLayout(vbox)

    self.btn.clicked.connect(self.open_win)

  @Slot()
  def open_win(self):
    i = self.combo.currentIndex()
    j = self.combo2.currentIndex()
    if i == 0:
        #im = Image.open("mountain.jpg")
        if j == 0:
          im = Image.open("mountain.jpg")
        if j == 1:
          im = Image.open("mountain.jpg")
        if j == 2:
          im = Image.open("mountain.jpg")
    if i == 1:
        #im = Image.open('field.jpg')
        if j == 0:
          im = Image.open('field.jpg')
        if j == 1:
          im = Image.open('field.jpg')
        if j == 2:
          im = Image.open('field.jpg')
    if i == 2:
        #im = Image.open('desert.jpg')
        if j == 0:
          im = Image.open('desert.jpg')
        if j == 1:
          im = Image.open('desert.jpg')
        if j == 2:
          im = Image.open('desert.jpg')
    if i == 3:
        #im = Image.open('city.jpg')
        if j == 0:
          im = Image.open('city.jpg')
        if j == 1:
          im = Image.open('city.jpg')
        if j == 2:
          im = Image.open('city.jpg')
    if i == 4:
        #im = Image.open('beach.jpg')
        if j == 0:
          im = Image.open('beach.jpg')
        if j == 1:
          im = Image.open('beach.jpg')
        if j == 2:
          im = Image.open('beach.jpg')
    if i == 5:
        #im = Image.open('swamp.jpg')
        if j == 0:
          im = Image.open('swamp.jpg')
        if j == 1:
          im = Image.open('swamp.jpg')
        if j == 2:
          im = Image.open('swamp.jpg')
    if i == 6:
        #im = Image.open('forest.jpg')
        if j == 0:
          im = Image.open('forest.jpg')
        if j == 1:
          im = Image.open('forest.jpg')
        if j == 2:
          im = Image.open('forest.jpg')
    im.show()

app = QApplication(sys.argv)
main = MyWindow()
main.show()
sys.exit(app.exec_())












#Ulrich the idea with the QPixmap was to make the images smaller and use the QPixmap to also add the effect to the picture but I could not figure out how to do that.
So we used the method Justin made for the effects.
import sys
from PySide6.QtWidgets import (QApplication, QWidget, QLabel, QVBoxLayout)
from PySide6.QtGui import QPixmap
from PySide6.QtCore import Qt

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.label = QLabel()
        pixmap = QPixmap('images/mountains.jpg')
        pixmap2 = QPixmap('images/field.jpg')
        pixmap3 = QPixmap('images/dessert.jpg')
        pixmap4 = QPixmap('images/city.jpg')
        pixmap5 = QPixmap('images/beach.jpg')
        pixmap6 = QPixmap('images/swamp.jpg')
        pixmap7 = QPixmap('images/forest.jpg')
        pixmap = pixmap.scaled(500, 500, Qt.KeepAspectRatio)
        pixmap2 = pixmap.scaled(500, 500, Qt.KeepAspectRatio)
        pixmap3 = pixmap.scaled(500, 500, Qt.KeepAspectRatio)
        pixmap4 = pixmap.scaled(500, 500, Qt.KeepAspectRatio)
        pixmap5 = pixmap.scaled(500, 500, Qt.KeepAspectRatio)
        pixmap6 = pixmap.scaled(500, 500, Qt.KeepAspectRatio)
        pixmap7 = pixmap.scaled(500, 500, Qt.KeepAspectRatio)
        self.label.setPixmap(pixmap)
        self.layout = QVBoxLayout()
        self.layout.addWidget(self.label)
        self.setLayout(self.layout)

app = QApplication(sys.argv)
main = MainWindow()
main.show()
app.exec_()





import sys
from PIL import Image
from PySide6.QtWidgets import (QApplication, QWidget, QLabel, QPushButton, QLineEdit,
                                QHBoxLayout, QVBoxLayout, QDialog, QTextBrowser, QComboBox)
from PySide6.QtGui import QPixmap
from PySide6.QtCore import Slot

class NewWindow(QWidget):
  def __init__(self, url):
    super().__init__()
    self.text = QLabel(url)
    self.layout = QVBoxLayout()
    self.layout.addWidget(self.text)
    self.setLayout(self.layout)


class MyWindow(QWidget):
  def __init__(self):
    super().__init__()

    self.my_pic_list = ['Mountain', 'Plains', 'Desert', 'Beach', 'Forest', 'City', 'Swamp']
    self.my_filter_list = ['Sunrise', 'SunSet', 'Night']
    self.my_images = ['mountain.jpg', 'plains.jpg', 'desert.jpg', 'beach.jpg', 'forest.jpg', 'city.jpg', 'swamp.jpg']
    self.my_lineedit = QLineEdit("Please select an Image and a Filter.")
    self.combo = QComboBox()
    self.combo.addItems(self.my_pic_list)
    self.combo2 = QComboBox()
    self.combo2.addItems(self.my_filter_list)
    self.btn = QPushButton('CLICK ME')
    vbox = QVBoxLayout()
    vbox.addWidget(self.my_lineedit)
    vbox.addWidget(self.combo)
    vbox.addWidget(self.combo2)
    vbox.addWidget(self.btn)
    self.setLayout(vbox)

    self.btn.clicked.connect(self.open_win)


  @Slot()
  def open_win(self):
    i = self.combo.currentIndex()
    j = self.combo2.currentIndex()
    if i == 0:
        im = Image.open("mountain.jpg")
    if i == 1:
        im = Image.open('plains.jpg')
    if i == 2:
        im = Image.open('desert.jpg')
    if i == 3:
        im = Image.open('beach.jpg')
    if i == 4:
        im = Image.open('forest.jpg')
    if i == 5:
        im = Image.open('city.jpg')
    if i == 6:
        im = Image.open('swamp.jpg')

    if j == 0:
        filter_nums = [1.3, 1.3, 1.1]
    if j == 1:
        filter_nums = [.7, .4, .7]
    if j == 2:
        filter_nums = [.1, .1, .2]

    pic_height = im.height
    pic_width = im.width

    new_image = Image.new("RGB", (pic_width,  pic_height))

    red_pixels = []
    green_pixels = []
    blue_pixels = []

    for x in range(pic_width):
        for y in range(pic_height):
            temp_tuple = im.getpixel((x,y))

            # get the rgb colors of the pixel
            red_new = int(temp_tuple[0]*filter_nums[0])
            green_new = int(temp_tuple[1]*filter_nums[1])
            blue_new = int(temp_tuple[2]*filter_nums[2])



            # put the pixels into new_image
            rgb_val =(red_new, green_new, blue_new)
            new_image.putpixel((x,y), rgb_val)

    new_image.show()



app = QApplication(sys.argv)
main = MyWindow()
main.show()
sys.exit(app.exec_())

# Attempt to find specific values for the sky
#             if (temp_tuple[0] < upper_blue[0]):
#                 if (temp_tuple[0] > lower_blue[0]):
#                     if (temp_tuple[1] < upper_blue[1]):
#                         if (temp_tuple[1] > lower_blue[1]):
#                             if (temp_tuple[2] < upper_blue[2]):
#                                 if (temp_tuple[2] > lower_blue[2]):
#                                     red_new = 0
#                                     green_new = 0
#                                     blue_new = 0
#             else:
#                 red_new = int(temp_tuple[0]*filter_nums[0])
#                 green_new = int(temp_tuple[1]*filter_nums[1])
#                 blue_new = int(temp_tuple[2]*filter_nums[2])



# Final Code
import sys
from PIL import Image
from PySide6.QtWidgets import (QApplication, QWidget, QLabel, QPushButton, QLineEdit,
                                QHBoxLayout, QVBoxLayout, QDialog, QTextBrowser, QComboBox)
from PySide6.QtGui import QPixmap
from PySide6.QtCore import Slot

# images used
# https://images.unsplash.com/photo-1604223190546-a43e4c7f29d7?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8bW91bnRhaW4lMjBsYW5kc2NhcGV8ZW58MHx8MHx8&w=1000&q=80
# https://images.ctfassets.net/u0haasspfa6q/2sMNoIuT9uGQjKd7UQ2SMQ/1bb98e383745b240920678ea2daa32e5/sell_landscape_photography_online
# https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQVM3si4P398FeL5hIFOaB-0y_VCoupw5nRvA&usqp=CAU
# https://cdn.pixabay.com/photo/2017/09/11/00/18/beach-2737460_960_720.jpg
# https://www.eea.europa.eu/themes/biodiversity/forests/forest-dynamics-in-europe-and/image_landscape
# https://cdn.modlar.com/photos/8892/img/s_1920_x/old_and_new_city_landscape_58f9715eb08fa.jpg
# https://upload.wikimedia.org/wikipedia/commons/1/18/Beautiful_landscape_of_green_swamp_with_calm_waters.jpg

# creates layout for the program
class NewWindow(QWidget):
  def __init__(self, url):
    super().__init__()
    self.text = QLabel(url)
    self.layout = QVBoxLayout()
    self.layout.addWidget(self.text)
    self.setLayout(self.layout)


class MyWindow(QWidget):
  def __init__(self):
    super().__init__()

    # creates array with for the images and the filters
    self.my_pic_list = ['Mountain', 'Plains', 'Desert', 'Beach', 'Forest', 'City', 'Swamp']
    self.my_filter_list = ['Sunrise', 'SunSet', 'Night']
    self.my_images = ['mountain.jpg', 'plains.jpg', 'desert.jpg', 'beach.jpg', 'forest.jpg', 'city.jpg', 'swamp.jpg']
    self.my_lineedit = QLineEdit("Please select an Image and a Filter.")
    # links the arrays and the buttons
    self.combo = QComboBox()
    self.combo.addItems(self.my_pic_list)
    self.combo2 = QComboBox()
    self.combo2.addItems(self.my_filter_list)
    self.btn = QPushButton('Initialize Filter')
    vbox = QVBoxLayout()
    vbox.addWidget(self.my_lineedit)
    vbox.addWidget(self.combo)
    vbox.addWidget(self.combo2)
    vbox.addWidget(self.btn)
    self.setLayout(vbox)

    self.btn.clicked.connect(self.open_win)


  @Slot()
  def open_win(self):

    # checks the selected box to find the right image and filter
    i = self.combo.currentIndex()
    j = self.combo2.currentIndex()
    if i == 0:
        im = Image.open("mountain.jpg")
    if i == 1:
        im = Image.open('plains.jpg')
    if i == 2:
        im = Image.open('desert.jpg')
    if i == 3:
        im = Image.open('beach.jpg')
    if i == 4:
        im = Image.open('forest.jpg')
    if i == 5:
        im = Image.open('city.jpg')
    if i == 6:
        im = Image.open('swamp.jpg')

    if j == 0:
        filter_nums = [1.3, 1.3, 1.1]
    if j == 1:
        filter_nums = [.7, .4, .7]
    if j == 2:
        filter_nums = [.1, .1, .2]
    if j == 3:
        filter_nums = [1, 1, 1]

    # finds the dimensions of the selected image
    pic_height = im.height
    pic_width = im.width

    # makes a new image with the selected image's dimensions
    new_image = Image.new("RGB", (pic_width,  pic_height))

    red_pixels = []
    green_pixels = []
    blue_pixels = []
    neg_pixels = []

    # runs through each pixel in the selected image
    for x in range(pic_width):
        for y in range(pic_height):
            # finds the color value of the pixel
            temp_tuple = im.getpixel((x,y))

            if j != 3:
                # applies the filter to the found pixel and saves it
                red_new = int(temp_tuple[0]*filter_nums[0])
                green_new = int(temp_tuple[1]*filter_nums[1])
                blue_new = int(temp_tuple[2]*filter_nums[2])

                # put the pixels into new_image
                rgb_val =(red_new, green_new, blue_new)
                new_image.putpixel((x,y), rgb_val)

            else:
                red_new = int(temp_tuple[0]*filter_nums[0])
                green_new = int(temp_tuple[1]*filter_nums[1])
                blue_new = int(temp_tuple[2]*filter_nums[2])
                red_neg_new = (255-red_new) 
                green_neg_new = (255-green_new)
                blue_neg_new = (255-blue_new)
                neg_val =(red_neg_new, green_neg_new, blue_neg_new)
                new_image.putpixel((x,y), neg_val)

    # shows the now filtered image
    new_image.show()



app = QApplication(sys.argv)
main = MyWindow()
main.show()
sys.exit(app.exec_())
